{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"getEmptyCells\",\n            value: function getEmptyCells() {\n                var emptyCells = [];\n                for(var row = 0; row < this.state.length; row++){\n                    for(var col = 0; col < this.state[row].length; col++)if (this.state[row][col] === 0) emptyCells.push({\n                        row: row,\n                        col: col\n                    });\n                }\n                return emptyCells;\n            }\n        },\n        {\n            key: \"addRandomNumber\",\n            value: function addRandomNumber() {\n                var emptyCells = this.getEmptyCells();\n                if (emptyCells.length === 0) return;\n                var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                var randomCell = emptyCells[randomIndex];\n                var newValue = Math.random() < 0.9 ? 2 : 4;\n                this.state[randomCell.row][randomCell.col] = newValue;\n            }\n        },\n        {\n            key: \"gamePossible\",\n            value: function gamePossible() {\n                // Превіряємо наявність пустих клітинок\n                for(var row = 0; row < this.state.length; row++)for(var col = 0; col < this.state[row].length; col++){\n                    if (this.state[row][col] === 0) return true;\n                }\n                // Перевіряємо можливість злиття по горизонталі\n                for(var row1 = 0; row1 < this.state.length; row1++)for(var col1 = 0; col1 < this.state[row1].length - 1; col1++){\n                    if (this.state[row1][col1] === this.state[row1][col1 + 1]) return true;\n                }\n                // Перевіряємо можливість злиття по вертикалі\n                for(var coll = 0; coll < this.state[0].length; coll++)for(var row2 = 0; row2 < this.state.length - 1; row2++){\n                    if (this.state[row2][coll] === this.state[row2 + 1][coll]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this, _loop = function(row) {\n                    var currentRow = _this.state[row];\n                    var filteredRow = currentRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                        filteredRow[i] *= 2;\n                        filteredRow[i + 1] = 0;\n                        _this.score += filteredRow[i];\n                    }\n                    filteredRow = filteredRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(filteredRow.length < 4)filteredRow.push(0);\n                    _this.state[row] = filteredRow;\n                };\n                if (this.status !== \"playing\") return;\n                var previousState = JSON.stringify(this.state);\n                for(var row = 0; row < this.state.length; row++)_loop(row);\n                var newState = JSON.stringify(this.state);\n                if (previousState !== newState) this.addRandomNumber();\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this, _loop = function(row) {\n                    var currentRow = _this.state[row];\n                    var filteredRow = currentRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = filteredRow.length - 1; i > 0; i--)if (filteredRow[i] === filteredRow[i - 1]) {\n                        filteredRow[i] *= 2;\n                        filteredRow[i - 1] = 0;\n                        _this.score += filteredRow[i];\n                    }\n                    filteredRow = filteredRow.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(filteredRow.length < 4)filteredRow.unshift(0);\n                    _this.state[row] = filteredRow;\n                };\n                if (this.status !== \"playing\") return;\n                var previousState = JSON.stringify(this.state);\n                for(var row = 0; row < this.state.length; row++)_loop(row);\n                var newState = JSON.stringify(this.state);\n                if (previousState !== newState) this.addRandomNumber();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this, _loop = function(coll) {\n                    var currentColl = [];\n                    for(var row = 0; row < _this.state.length; row++)currentColl.push(_this.state[row][coll]);\n                    var filteredColl = currentColl.filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = 0; i < filteredColl.length - 1; i++)if (filteredColl[i] === filteredColl[i + 1]) {\n                        filteredColl[i] *= 2;\n                        filteredColl[i + 1] = 0;\n                        _this.score += filteredColl[i];\n                    }\n                    filteredColl = filteredColl.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(filteredColl.length < 4)filteredColl.push(0);\n                    for(var row1 = 0; row1 < _this.state.length; row1++)_this.state[row1][coll] = filteredColl[row1];\n                };\n                if (this.status !== \"playing\") return;\n                var previousState = JSON.stringify(this.state);\n                for(var coll = 0; coll < this.state[0].length; coll++)_loop(coll);\n                var newState = JSON.stringify(this.state);\n                if (previousState !== newState) this.addRandomNumber();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this, _loop = function(coll) {\n                    var currentColl = [];\n                    for(var row = 0; row < _this.state.length; row++)currentColl.push(_this.state[row][coll]);\n                    var filteredColl = currentColl.filter(function(num) {\n                        return num !== 0;\n                    });\n                    for(var i = filteredColl.length - 1; i > 0; i--)if (filteredColl[i] === filteredColl[i - 1]) {\n                        filteredColl[i] *= 2;\n                        filteredColl[i - 1] = 0;\n                        _this.score += filteredColl[i];\n                    }\n                    filteredColl = filteredColl.filter(function(num) {\n                        return num !== 0;\n                    });\n                    while(filteredColl.length < 4)filteredColl.unshift(0);\n                    for(var row1 = 0; row1 < _this.state.length; row1++)_this.state[row1][coll] = filteredColl[row1];\n                };\n                if (this.status !== \"playing\") return;\n                var previousState = JSON.stringify(this.state);\n                for(var coll = 0; coll < this.state[0].length; coll++)_loop(coll);\n                var newState = JSON.stringify(this.state);\n                if (previousState !== newState) this.addRandomNumber();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                for(var row = 0; row < this.state.length; row++){\n                    for(var col = 0; col < this.state[row].length; col++)if (this.state[row][col] === 2048) {\n                        this.status = \"win\";\n                        return this.status;\n                    }\n                }\n                if (!this.gamePossible()) {\n                    this.status = \"lose\";\n                    return this.status;\n                }\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.state = JSON.parse(JSON.stringify(this.initialState));\n                this.score = 0;\n                this.status = \"playing\";\n                this.addRandomNumber();\n                this.addRandomNumber();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = JSON.parse(JSON.stringify(this.initialState));\n                this.score = 0;\n                this.status = \"idle\";\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\nvar $197cd56b15c33885$var$GameStatus = {\n    IDLE: \"idle\",\n    PLAYING: \"playing\",\n    WIN: \"win\",\n    LOSE: \"lose\"\n};\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".button.start\");\nvar $197cd56b15c33885$var$scoreElement = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$winMessage = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$loseMessage = document.querySelector(\".message-lose\");\nfunction $197cd56b15c33885$var$startButtonUpdate() {\n    $197cd56b15c33885$var$scoreElement.textContent = $197cd56b15c33885$var$game.score;\n    $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n    $197cd56b15c33885$var$startButton.classList.replace(\"start\", \"restart\");\n    $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$updateScore() {\n    $197cd56b15c33885$var$scoreElement.textContent = $197cd56b15c33885$var$game.score;\n}\nfunction $197cd56b15c33885$var$updateStatus() {\n    if ($197cd56b15c33885$var$game.status === $197cd56b15c33885$var$GameStatus.WIN) $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n    else if ($197cd56b15c33885$var$game.status === $197cd56b15c33885$var$GameStatus.LOSE) $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n}\nfunction $197cd56b15c33885$var$resetButtonUpdate() {\n    $197cd56b15c33885$var$scoreElement.textContent = \"0\";\n    $197cd56b15c33885$var$startButton.textContent = \"Start\";\n    $197cd56b15c33885$var$startButton.classList.replace(\"restart\", \"start\");\n    $197cd56b15c33885$var$startMessage.classList.remove(\"hidden\");\n    $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n    $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n}\nfunction $197cd56b15c33885$var$updateField() {\n    var rows = document.querySelectorAll(\".field-row\");\n    rows.forEach(function(element, rowIndex) {\n        var cells = element.querySelectorAll(\".field-cell\");\n        cells.forEach(function(cell, cellIndex) {\n            var value = $197cd56b15c33885$var$game.state[rowIndex][cellIndex];\n            cell.className = \"field-cell\";\n            if (value !== 0) {\n                cell.classList.add(\"field-cell--\".concat(value));\n                cell.textContent = value;\n            } else cell.textContent = \"\";\n        });\n    });\n}\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.status === $197cd56b15c33885$var$GameStatus.IDLE) {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startButtonUpdate();\n        $197cd56b15c33885$var$updateField();\n    } else {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$resetButtonUpdate();\n        $197cd56b15c33885$var$updateField();\n    }\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    e.preventDefault();\n    if ($197cd56b15c33885$var$game.status === $197cd56b15c33885$var$GameStatus.IDLE || $197cd56b15c33885$var$game.status === $197cd56b15c33885$var$GameStatus.WIN || $197cd56b15c33885$var$game.status === $197cd56b15c33885$var$GameStatus.LOSE) return;\n    switch(e.key){\n        case \"ArrowUp\":\n            $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $197cd56b15c33885$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $197cd56b15c33885$var$game.moveRight();\n            break;\n    }\n    $197cd56b15c33885$var$game.getStatus();\n    $197cd56b15c33885$var$updateStatus();\n    $197cd56b15c33885$var$updateScore();\n    $197cd56b15c33885$var$updateField();\n});\n\n})();\n//# sourceMappingURL=index.225622e2.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n// Write your code here\n\nconst GameStatus = {\n  IDLE: 'idle',\n  PLAYING: 'playing',\n  WIN: 'win',\n  LOSE: 'lose',\n};\n\nconst startButton = document.querySelector('.button.start');\nconst scoreElement = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nfunction startButtonUpdate() {\n  scoreElement.textContent = game.score;\n  startButton.textContent = 'Restart';\n  startButton.classList.replace('start', 'restart');\n  startMessage.classList.add('hidden');\n}\n\nfunction updateScore() {\n  scoreElement.textContent = game.score;\n}\n\nfunction updateStatus() {\n  if (game.status === GameStatus.WIN) {\n    winMessage.classList.remove('hidden');\n  } else if (game.status === GameStatus.LOSE) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction resetButtonUpdate() {\n  scoreElement.textContent = '0';\n  startButton.textContent = 'Start';\n  startButton.classList.replace('restart', 'start');\n  startMessage.classList.remove('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n}\n\nfunction updateField() {\n  const rows = document.querySelectorAll('.field-row');\n\n  rows.forEach((element, rowIndex) => {\n    const cells = element.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, cellIndex) => {\n      const value = game.state[rowIndex][cellIndex];\n\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n    });\n  });\n}\n\nstartButton.addEventListener('click', () => {\n  if (game.status === GameStatus.IDLE) {\n    game.start();\n    startButtonUpdate();\n    updateField();\n  } else {\n    game.restart();\n    resetButtonUpdate();\n    updateField();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (game.status === GameStatus.IDLE\n    || game.status === GameStatus.WIN\n    || game.status === GameStatus.LOSE) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n  game.getStatus();\n  updateStatus();\n  updateScore();\n  updateField();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  constructor(initialState) {\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push({\n            row, col,\n          });\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  addRandomNumber() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n    const newValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.state[randomCell.row][randomCell.col] = newValue;\n  }\n\n  gamePossible() {\n    // Превіряємо наявність пустих клітинок\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    // Перевіряємо можливість злиття по горизонталі\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length - 1; col++) {\n        if (this.state[row][col] === this.state[row][col + 1]) {\n          return true;\n        }\n      }\n    }\n\n    // Перевіряємо можливість злиття по вертикалі\n    for (let coll = 0; coll < this.state[0].length; coll++) {\n      for (let row = 0; row < this.state.length - 1; row++) {\n        if (this.state[row][coll] === this.state[row + 1][coll]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    for (let row = 0; row < this.state.length; row++) {\n      const currentRow = this.state[row];\n\n      let filteredRow = currentRow.filter(num => num !== 0);\n\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          filteredRow[i + 1] = 0;\n          this.score += filteredRow[i];\n        }\n      }\n      filteredRow = filteredRow.filter(num => num !== 0);\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      this.state[row] = filteredRow;\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (previousState !== newState) {\n      this.addRandomNumber();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    for (let row = 0; row < this.state.length; row++) {\n      const currentRow = this.state[row];\n\n      let filteredRow = currentRow.filter(num => num !== 0);\n\n      for (let i = filteredRow.length - 1; i > 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          filteredRow[i] *= 2;\n          filteredRow[i - 1] = 0;\n          this.score += filteredRow[i];\n        }\n      }\n      filteredRow = filteredRow.filter(num => num !== 0);\n\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n\n      this.state[row] = filteredRow;\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (previousState !== newState) {\n      this.addRandomNumber();\n    }\n  };\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    for (let coll = 0; coll < this.state[0].length; coll++) {\n      const currentColl = [];\n\n      for (let row = 0; row < this.state.length; row++) {\n        currentColl.push(this.state[row][coll]);\n      }\n\n      let filteredColl = currentColl.filter(num => num !== 0);\n\n      for (let i = 0; i < filteredColl.length - 1; i++) {\n        if (filteredColl[i] === filteredColl[i + 1]) {\n          filteredColl[i] *= 2;\n          filteredColl[i + 1] = 0;\n          this.score += filteredColl[i];\n        }\n      }\n      filteredColl = filteredColl.filter(num => num !== 0);\n\n      while (filteredColl.length < 4) {\n        filteredColl.push(0);\n      }\n\n      for (let row = 0; row < this.state.length; row++) {\n        this.state[row][coll] = filteredColl[row];\n      }\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (previousState !== newState) {\n      this.addRandomNumber();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    for (let coll = 0; coll < this.state[0].length; coll++) {\n      const currentColl = [];\n\n      for (let row = 0; row < this.state.length; row++) {\n        currentColl.push(this.state[row][coll]);\n      }\n\n      let filteredColl = currentColl.filter(num => num !== 0);\n\n      for (let i = filteredColl.length - 1; i > 0; i--) {\n        if (filteredColl[i] === filteredColl[i - 1]) {\n          filteredColl[i] *= 2;\n          filteredColl[i - 1] = 0;\n          this.score += filteredColl[i];\n        }\n      }\n      filteredColl = filteredColl.filter(num => num !== 0);\n\n      while (filteredColl.length < 4) {\n        filteredColl.unshift(0);\n      }\n\n      for (let row = 0; row < this.state.length; row++) {\n        this.state[row][coll] = filteredColl[row];\n      }\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (previousState !== newState) {\n      this.addRandomNumber();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  };\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = 'win';\n\n          return this.status;\n        }\n      }\n    }\n\n    if (!this.gamePossible()) {\n      this.status = 'lose';\n\n      return this.status;\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'playing';\n\n    this.addRandomNumber();\n    this.addRandomNumber();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$197cd56b15c33885$var$game","protoProps","staticProps","Game","initialState","instance","Constructor","TypeError","state","JSON","parse","stringify","score","status","value","emptyCells","row","col","push","getEmptyCells","randomIndex","Math","floor","random","randomCell","row1","col1","coll","row2","_this","previousState","_loop","filteredRow","currentRow","filter","num","addRandomNumber","unshift","currentColl","filteredColl","gamePossible","prototype","$197cd56b15c33885$var$GameStatus","IDLE","WIN","LOSE","$197cd56b15c33885$var$startButton","document","querySelector","$197cd56b15c33885$var$scoreElement","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$updateField","rows","querySelectorAll","forEach","element","rowIndex","cells","cell","cellIndex","className","classList","add","concat","textContent","addEventListener","start","replace","restart","remove","e","preventDefault","moveUp","moveDown","moveLeft","moveRight","getStatus"],"version":3,"file":"index.225622e2.js.map"}