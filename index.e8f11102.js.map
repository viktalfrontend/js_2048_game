{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        for(let row = 0; row < this.state.length; row++){\n            for(let col = 0; col < this.state[row].length; col++)if (this.state[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        return emptyCells;\n    }\n    addRandomNumber() {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length === 0) return;\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        const randomCell = emptyCells[randomIndex];\n        const newValue = Math.random() < 0.9 ? 2 : 4;\n        this.state[randomCell.row][randomCell.col] = newValue;\n    }\n    gamePossible() {\n        // Превіряємо наявність пустих клітинок\n        for(let row = 0; row < this.state.length; row++)for(let col = 0; col < this.state[row].length; col++){\n            if (this.state[row][col] === 0) return true;\n        }\n        // Перевіряємо можливість злиття по горизонталі\n        for(let row = 0; row < this.state.length; row++)for(let col = 0; col < this.state[row].length - 1; col++){\n            if (this.state[row][col] === this.state[row][col + 1]) return true;\n        }\n        // Перевіряємо можливість злиття по вертикалі\n        for(let coll = 0; coll < this.state[0].length; coll++)for(let row = 0; row < this.state.length - 1; row++){\n            if (this.state[row][coll] === this.state[row + 1][coll]) return true;\n        }\n        return false;\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        const previousState = JSON.stringify(this.state);\n        for(let row = 0; row < this.state.length; row++){\n            const currentRow = this.state[row];\n            let filteredRow = currentRow.filter((num)=>num !== 0);\n            for(let i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                filteredRow[i] *= 2;\n                filteredRow[i + 1] = 0;\n                this.score += filteredRow[i];\n            }\n            filteredRow = filteredRow.filter((num)=>num !== 0);\n            while(filteredRow.length < 4)filteredRow.push(0);\n            this.state[row] = filteredRow;\n        }\n        const newState = JSON.stringify(this.state);\n        if (previousState !== newState) this.addRandomNumber();\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        const previousState = JSON.stringify(this.state);\n        for(let row = 0; row < this.state.length; row++){\n            const currentRow = this.state[row];\n            let filteredRow = currentRow.filter((num)=>num !== 0);\n            for(let i = filteredRow.length - 1; i > 0; i--)if (filteredRow[i] === filteredRow[i - 1]) {\n                filteredRow[i] *= 2;\n                filteredRow[i - 1] = 0;\n                this.score += filteredRow[i];\n            }\n            filteredRow = filteredRow.filter((num)=>num !== 0);\n            while(filteredRow.length < 4)filteredRow.unshift(0);\n            this.state[row] = filteredRow;\n        }\n        const newState = JSON.stringify(this.state);\n        if (previousState !== newState) this.addRandomNumber();\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        const previousState = JSON.stringify(this.state);\n        for(let coll = 0; coll < this.state[0].length; coll++){\n            const currentColl = [];\n            for(let row = 0; row < this.state.length; row++)currentColl.push(this.state[row][coll]);\n            let filteredColl = currentColl.filter((num)=>num !== 0);\n            for(let i = 0; i < filteredColl.length - 1; i++)if (filteredColl[i] === filteredColl[i + 1]) {\n                filteredColl[i] *= 2;\n                filteredColl[i + 1] = 0;\n                this.score += filteredColl[i];\n            }\n            filteredColl = filteredColl.filter((num)=>num !== 0);\n            while(filteredColl.length < 4)filteredColl.push(0);\n            for(let row = 0; row < this.state.length; row++)this.state[row][coll] = filteredColl[row];\n        }\n        const newState = JSON.stringify(this.state);\n        if (previousState !== newState) this.addRandomNumber();\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        const previousState = JSON.stringify(this.state);\n        for(let coll = 0; coll < this.state[0].length; coll++){\n            const currentColl = [];\n            for(let row = 0; row < this.state.length; row++)currentColl.push(this.state[row][coll]);\n            let filteredColl = currentColl.filter((num)=>num !== 0);\n            for(let i = filteredColl.length - 1; i > 0; i--)if (filteredColl[i] === filteredColl[i - 1]) {\n                filteredColl[i] *= 2;\n                filteredColl[i - 1] = 0;\n                this.score += filteredColl[i];\n            }\n            filteredColl = filteredColl.filter((num)=>num !== 0);\n            while(filteredColl.length < 4)filteredColl.unshift(0);\n            for(let row = 0; row < this.state.length; row++)this.state[row][coll] = filteredColl[row];\n        }\n        const newState = JSON.stringify(this.state);\n        if (previousState !== newState) this.addRandomNumber();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        for(let row = 0; row < this.state.length; row++){\n            for(let col = 0; col < this.state[row].length; col++)if (this.state[row][col] === 2048) {\n                this.status = \"win\";\n                return this.status;\n            }\n        }\n        if (!this.gamePossible()) {\n            this.status = \"lose\";\n            return this.status;\n        }\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomNumber();\n        this.addRandomNumber();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.score = 0;\n        this.status = \"idle\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$GameStatus = {\n    IDLE: \"idle\",\n    PLAYING: \"playing\",\n    WIN: \"win\",\n    LOSE: \"lose\"\n};\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$startButtonUpdate() {\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.score;\n    $09e991522ca7e64e$var$startButton.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startButton.classList.replace(\"start\", \"restart\");\n    $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$updateScore() {\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.score;\n}\nfunction $09e991522ca7e64e$var$updateStatus() {\n    if ($09e991522ca7e64e$var$game.status === $09e991522ca7e64e$var$GameStatus.WIN) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.status === $09e991522ca7e64e$var$GameStatus.LOSE) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$resetButtonUpdate() {\n    $09e991522ca7e64e$var$scoreElement.textContent = \"0\";\n    $09e991522ca7e64e$var$startButton.textContent = \"Start\";\n    $09e991522ca7e64e$var$startButton.classList.replace(\"restart\", \"start\");\n    $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$updateField() {\n    const rows = document.querySelectorAll(\".field-row\");\n    rows.forEach((element, rowIndex)=>{\n        const cells = element.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, cellIndex)=>{\n            const value = $09e991522ca7e64e$var$game.state[rowIndex][cellIndex];\n            cell.className = \"field-cell\";\n            if (value !== 0) {\n                cell.classList.add(`field-cell--${value}`);\n                cell.textContent = value;\n            } else cell.textContent = \"\";\n        });\n    });\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$game.status === $09e991522ca7e64e$var$GameStatus.IDLE) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButtonUpdate();\n        $09e991522ca7e64e$var$updateField();\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$resetButtonUpdate();\n        $09e991522ca7e64e$var$updateField();\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    e.preventDefault();\n    if ($09e991522ca7e64e$var$game.status === $09e991522ca7e64e$var$GameStatus.IDLE || $09e991522ca7e64e$var$game.status === $09e991522ca7e64e$var$GameStatus.WIN || $09e991522ca7e64e$var$game.status === $09e991522ca7e64e$var$GameStatus.LOSE) return;\n    switch(e.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$updateStatus();\n    $09e991522ca7e64e$var$updateScore();\n    $09e991522ca7e64e$var$updateField();\n});\n\n\n//# sourceMappingURL=index.e8f11102.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n// Write your code here\n\nconst GameStatus = {\n  IDLE: 'idle',\n  PLAYING: 'playing',\n  WIN: 'win',\n  LOSE: 'lose',\n};\n\nconst startButton = document.querySelector('.button.start');\nconst scoreElement = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nfunction startButtonUpdate() {\n  scoreElement.textContent = game.score;\n  startButton.textContent = 'Restart';\n  startButton.classList.replace('start', 'restart');\n  startMessage.classList.add('hidden');\n}\n\nfunction updateScore() {\n  scoreElement.textContent = game.score;\n}\n\nfunction updateStatus() {\n  if (game.status === GameStatus.WIN) {\n    winMessage.classList.remove('hidden');\n  } else if (game.status === GameStatus.LOSE) {\n    loseMessage.classList.remove('hidden');\n  }\n}\n\nfunction resetButtonUpdate() {\n  scoreElement.textContent = '0';\n  startButton.textContent = 'Start';\n  startButton.classList.replace('restart', 'start');\n  startMessage.classList.remove('hidden');\n  winMessage.classList.add('hidden');\n  loseMessage.classList.add('hidden');\n}\n\nfunction updateField() {\n  const rows = document.querySelectorAll('.field-row');\n\n  rows.forEach((element, rowIndex) => {\n    const cells = element.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, cellIndex) => {\n      const value = game.state[rowIndex][cellIndex];\n\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n        cell.textContent = value;\n      } else {\n        cell.textContent = '';\n      }\n    });\n  });\n}\n\nstartButton.addEventListener('click', () => {\n  if (game.status === GameStatus.IDLE) {\n    game.start();\n    startButtonUpdate();\n    updateField();\n  } else {\n    game.restart();\n    resetButtonUpdate();\n    updateField();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  e.preventDefault();\n\n  if (game.status === GameStatus.IDLE\n    || game.status === GameStatus.WIN\n    || game.status === GameStatus.LOSE) {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n  }\n  game.getStatus();\n  updateStatus();\n  updateScore();\n  updateField();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  constructor(initialState) {\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          emptyCells.push({\n            row, col,\n          });\n        }\n      }\n    }\n\n    return emptyCells;\n  }\n\n  addRandomNumber() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const randomCell = emptyCells[randomIndex];\n    const newValue = Math.random() < 0.9 ? 2 : 4;\n\n    this.state[randomCell.row][randomCell.col] = newValue;\n  }\n\n  gamePossible() {\n    // Превіряємо наявність пустих клітинок\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    // Перевіряємо можливість злиття по горизонталі\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length - 1; col++) {\n        if (this.state[row][col] === this.state[row][col + 1]) {\n          return true;\n        }\n      }\n    }\n\n    // Перевіряємо можливість злиття по вертикалі\n    for (let coll = 0; coll < this.state[0].length; coll++) {\n      for (let row = 0; row < this.state.length - 1; row++) {\n        if (this.state[row][coll] === this.state[row + 1][coll]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    for (let row = 0; row < this.state.length; row++) {\n      const currentRow = this.state[row];\n\n      let filteredRow = currentRow.filter(num => num !== 0);\n\n      for (let i = 0; i < filteredRow.length - 1; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          filteredRow[i] *= 2;\n          filteredRow[i + 1] = 0;\n          this.score += filteredRow[i];\n        }\n      }\n      filteredRow = filteredRow.filter(num => num !== 0);\n\n      while (filteredRow.length < 4) {\n        filteredRow.push(0);\n      }\n\n      this.state[row] = filteredRow;\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (previousState !== newState) {\n      this.addRandomNumber();\n    }\n  }\n\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    for (let row = 0; row < this.state.length; row++) {\n      const currentRow = this.state[row];\n\n      let filteredRow = currentRow.filter(num => num !== 0);\n\n      for (let i = filteredRow.length - 1; i > 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          filteredRow[i] *= 2;\n          filteredRow[i - 1] = 0;\n          this.score += filteredRow[i];\n        }\n      }\n      filteredRow = filteredRow.filter(num => num !== 0);\n\n      while (filteredRow.length < 4) {\n        filteredRow.unshift(0);\n      }\n\n      this.state[row] = filteredRow;\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (previousState !== newState) {\n      this.addRandomNumber();\n    }\n  };\n\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    for (let coll = 0; coll < this.state[0].length; coll++) {\n      const currentColl = [];\n\n      for (let row = 0; row < this.state.length; row++) {\n        currentColl.push(this.state[row][coll]);\n      }\n\n      let filteredColl = currentColl.filter(num => num !== 0);\n\n      for (let i = 0; i < filteredColl.length - 1; i++) {\n        if (filteredColl[i] === filteredColl[i + 1]) {\n          filteredColl[i] *= 2;\n          filteredColl[i + 1] = 0;\n          this.score += filteredColl[i];\n        }\n      }\n      filteredColl = filteredColl.filter(num => num !== 0);\n\n      while (filteredColl.length < 4) {\n        filteredColl.push(0);\n      }\n\n      for (let row = 0; row < this.state.length; row++) {\n        this.state[row][coll] = filteredColl[row];\n      }\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (previousState !== newState) {\n      this.addRandomNumber();\n    }\n  }\n\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    const previousState = JSON.stringify(this.state);\n\n    for (let coll = 0; coll < this.state[0].length; coll++) {\n      const currentColl = [];\n\n      for (let row = 0; row < this.state.length; row++) {\n        currentColl.push(this.state[row][coll]);\n      }\n\n      let filteredColl = currentColl.filter(num => num !== 0);\n\n      for (let i = filteredColl.length - 1; i > 0; i--) {\n        if (filteredColl[i] === filteredColl[i - 1]) {\n          filteredColl[i] *= 2;\n          filteredColl[i - 1] = 0;\n          this.score += filteredColl[i];\n        }\n      }\n      filteredColl = filteredColl.filter(num => num !== 0);\n\n      while (filteredColl.length < 4) {\n        filteredColl.unshift(0);\n      }\n\n      for (let row = 0; row < this.state.length; row++) {\n        this.state[row][coll] = filteredColl[row];\n      }\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (previousState !== newState) {\n      this.addRandomNumber();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  };\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    for (let row = 0; row < this.state.length; row++) {\n      for (let col = 0; col < this.state[row].length; col++) {\n        if (this.state[row][col] === 2048) {\n          this.status = 'win';\n\n          return this.status;\n        }\n      }\n    }\n\n    if (!this.gamePossible()) {\n      this.status = 'lose';\n\n      return this.status;\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'playing';\n\n    this.addRandomNumber();\n    this.addRandomNumber();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  // Add your own methods here\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","JSON","parse","stringify","score","status","getEmptyCells","emptyCells","row","length","col","push","addRandomNumber","randomIndex","Math","floor","random","randomCell","gamePossible","coll","moveLeft","previousState","filteredRow","currentRow","filter","num","i","moveRight","unshift","moveUp","currentColl","filteredColl","moveDown","getScore","getState","getStatus","start","restart","$09e991522ca7e64e$var$GameStatus","IDLE","WIN","LOSE","$09e991522ca7e64e$var$startButton","document","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$updateField","rows","querySelectorAll","forEach","element","rowIndex","cells","cell","cellIndex","value","className","classList","add","textContent","addEventListener","replace","remove","e","preventDefault","key"],"version":3,"file":"index.e8f11102.js.map"}